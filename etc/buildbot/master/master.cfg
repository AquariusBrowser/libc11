# -*- python -*-
# ex: set syntax=python:

# This is the libc11 buildmaster config file.
# It must be installed as 'master.cfg' in your buildmaster's base directory.

PROJECT_TITLE    = 'libc11'
PROJECT_URL      = 'http://libc11.org/'
MASTER_HTTP_URL  = 'http://192.168.1.100:8010/'
MASTER_HTTP_PORT = 8010
MASTER_PB_PORT   = 9989
GIT_URL          = 'git@bitbucket.org:dryproject/libc11.git'
GIT_BRANCH       = 'master'
SLAVE_PASSWORD   = 'pass' # FIXME

c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['protocols'] = {'pb': {'port': MASTER_PB_PORT}}
c['slaves'] = [
  BuildSlave('freebsd-10.1-x86_64', SLAVE_PASSWORD), # FreeBSD 10.1 (x86-64)
  BuildSlave('netbsd-6.1.5-x86_64', SLAVE_PASSWORD), # NetBSD 6.1.5 (x86-64)
  BuildSlave('openbsd-5.6-x86_64',  SLAVE_PASSWORD), # OpenBSD 5.6 (x86-64)
  BuildSlave('osx-10.7.5-x86_64',   SLAVE_PASSWORD), # Mac OS X 10.7.5 (x86-64)
  BuildSlave('solaris-11.2-x86_64', SLAVE_PASSWORD), # Solaris 11.2 (x86-64)
  BuildSlave('ubuntu-14.04-armhf',  SLAVE_PASSWORD), # Ubuntu 14.04 (ARMv7)
  BuildSlave('ubuntu-14.04-x86_64', SLAVE_PASSWORD), # Ubuntu 14.04 (x86-64)
]

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test
from buildbot.config import BuilderConfig

def builder(slavename, variant, env={}):
  name = '-'.join([slavename, variant])
  factory = BuildFactory()
  factory.addStep(Git(repourl=GIT_URL, branch=GIT_BRANCH, mode='incremental'))
  factory.addStep(ShellCommand(name='bootstrap', command=['./autogen.sh']))
  factory.addStep(Configure(env=env))
  factory.addStep(Compile(command=['make']))
  factory.addStep(Test(command=['make', 'check']))
  return BuilderConfig(name=name, slavenames=[slavename], factory=factory)

c['builders'] = []
c['builders'].append(builder('freebsd-10.1-x86_64', 'clang-3.4.1', {'CC': '/usr/bin/clang'}))
c['builders'].append(builder('freebsd-10.1-x86_64', 'gcc-4.9.3', {'CC': '/usr/local/bin/gcc49'}))
#c['builders'].append(builder('netbsd-6.1.5-x86_64', 'clang', {'CC': 'clang'})) # TODO
c['builders'].append(builder('netbsd-6.1.5-x86_64', 'gcc-4.5.3', {'CC': '/usr/bin/gcc'}))
c['builders'].append(builder('openbsd-5.6-x86_64', 'clang-3.5.0', {'CC': '/usr/local/bin/clang-3.5'}))
c['builders'].append(builder('openbsd-5.6-x86_64', 'gcc-4.2.1', {'CC': '/usr/bin/gcc'}))
#c['builders'].append(builder('osx-10.7.5-x86_64', 'clang', {'CC': 'clang'}))
#c['builders'].append(builder('solaris-11.2-x86_64', 'clang', {'CC': 'clang'}))
c['builders'].append(builder('ubuntu-14.04-armhf', 'clang-3.5.0', {'CC': '/usr/bin/clang-3.5'}))
c['builders'].append(builder('ubuntu-14.04-armhf', 'gcc-4.9.2', {'CC': '/usr/bin/gcc-4.9'}))
c['builders'].append(builder('ubuntu-14.04-x86_64', 'clang-3.5.0', {'CC': '/usr/bin/clang-3.5'}))
c['builders'].append(builder('ubuntu-14.04-x86_64', 'gcc-4.9.2', {'CC': '/usr/bin/gcc-4.9'}))

builderNames = [b.name for b in c['builders']]

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
c['change_source'].append(
  GitPoller(GIT_URL, branches=[GIT_BRANCH], pollinterval=5*60))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []
c['schedulers'].append(
  SingleBranchScheduler(name='all',
    change_filter=filter.ChangeFilter(branch=GIT_BRANCH),
    treeStableTimer=None,
    builderNames=builderNames))
c['schedulers'].append(
  ForceScheduler(name='force', builderNames=builderNames))

####### STATUS TARGETS

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth

c['status'] = []
c['status'].append(
  WebStatus(http_port=MASTER_HTTP_PORT, authz=Authz(
    auth=HTPasswdAuth('.htpasswd'),
    gracefulShutdown = True,
    forceBuild = 'auth',
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True)))

####### PROJECT IDENTITY

c['title'] = PROJECT_TITLE
c['titleURL'] = PROJECT_URL
c['buildbotURL'] = MASTER_HTTP_URL

####### DB URL

c['db'] = {'db_url': 'sqlite:///state.sqlite'}
